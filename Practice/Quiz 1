{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Wrangling with DataFrames Coding Quiz\n",
    "\n",
    "Use this Jupyter notebook to find the answers to the quiz in the previous section. There is an answer key in the next part of the lesson."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "\n",
    "# TODOS: \n",
    "# 1) import any other libraries you might need\n",
    "from pyspark.sql import functions as F\n",
    "from pyspark.sql.types import IntegerType\n",
    "from pyspark.sql import Window\n",
    "# 2) instantiate a Spark session \n",
    "spark = SparkSession.builder \\\n",
    "    .master(\"local\") \\\n",
    "    .appName(\"Word Count\") \\\n",
    "    .getOrCreate()\n",
    "        \n",
    "# 3) read in the data set located at the path \"data/sparkify_log_small.json\"\n",
    "df = spark.read.json(\"data/sparkify_log_small.json\")\n",
    "# 4) write code to answer the quiz questions "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1\n",
    "\n",
    "Which page did user id \"\" (empty string) NOT visit?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Row(artist='Showaddywaddy', auth='Logged In', firstName='Kenneth', gender='M', itemInSession=112, lastName='Matthews', length=232.93342, level='paid', location='Charlotte-Concord-Gastonia, NC-SC', method='PUT', page='NextSong', registration=1509380319284, sessionId=5132, song='Christmas Tears Will Fall', status=200, ts=1513720872284, userAgent='\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36\"', userId='1046'), Row(artist='Lily Allen', auth='Logged In', firstName='Elizabeth', gender='F', itemInSession=7, lastName='Chase', length=195.23873, level='free', location='Shreveport-Bossier City, LA', method='PUT', page='NextSong', registration=1512718541284, sessionId=5027, song='Cheryl Tweedy', status=200, ts=1513720878284, userAgent='\"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\"', userId='1000'), Row(artist='Cobra Starship Featuring Leighton Meester', auth='Logged In', firstName='Vera', gender='F', itemInSession=6, lastName='Blackwell', length=196.20526, level='paid', location='Racine, WI', method='PUT', page='NextSong', registration=1499855749284, sessionId=5516, song='Good Girls Go Bad (Feat.Leighton Meester) (Album Version)', status=200, ts=1513720881284, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.78.2 (KHTML, like Gecko) Version/7.0.6 Safari/537.78.2\"', userId='2219'), Row(artist='Alex Smoke', auth='Logged In', firstName='Sophee', gender='F', itemInSession=8, lastName='Barker', length=405.99465, level='paid', location='San Luis Obispo-Paso Robles-Arroyo Grande, CA', method='PUT', page='NextSong', registration=1513009647284, sessionId=2372, song=\"Don't See The Point\", status=200, ts=1513720905284, userAgent='\"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\"', userId='2373'), Row(artist=None, auth='Logged In', firstName='Jordyn', gender='F', itemInSession=0, lastName='Jones', length=None, level='free', location='Syracuse, NY', method='GET', page='Home', registration=1513648531284, sessionId=1746, song=None, status=200, ts=1513720913284, userAgent='\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.94 Safari/537.36\"', userId='1747')]\n",
      "root\n",
      " |-- artist: string (nullable = true)\n",
      " |-- auth: string (nullable = true)\n",
      " |-- firstName: string (nullable = true)\n",
      " |-- gender: string (nullable = true)\n",
      " |-- itemInSession: long (nullable = true)\n",
      " |-- lastName: string (nullable = true)\n",
      " |-- length: double (nullable = true)\n",
      " |-- level: string (nullable = true)\n",
      " |-- location: string (nullable = true)\n",
      " |-- method: string (nullable = true)\n",
      " |-- page: string (nullable = true)\n",
      " |-- registration: long (nullable = true)\n",
      " |-- sessionId: long (nullable = true)\n",
      " |-- song: string (nullable = true)\n",
      " |-- status: long (nullable = true)\n",
      " |-- ts: long (nullable = true)\n",
      " |-- userAgent: string (nullable = true)\n",
      " |-- userId: string (nullable = true)\n",
      "\n",
      "None\n",
      "[Row(Page='Home'), Row(Page='About'), Row(Page='Login'), Row(Page='Help')]\n"
     ]
    }
   ],
   "source": [
    "# TODO: write your code to answer question 1\n",
    "print(df.take(5))\n",
    "print(df.printSchema())\n",
    "print(df.select(\"Page\").where(\"userId = ''\").distinct().collect())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2 - Reflect\n",
    "\n",
    "What type of user does the empty string user id most likely refer to?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+------+\n",
      "|summary|artist|\n",
      "+-------+------+\n",
      "|  count|     0|\n",
      "|   mean|  null|\n",
      "| stddev|  null|\n",
      "|    min|  null|\n",
      "|    max|  null|\n",
      "+-------+------+\n",
      "\n",
      "None\n",
      "+-------+----------+\n",
      "|summary|      auth|\n",
      "+-------+----------+\n",
      "|  count|       336|\n",
      "|   mean|      null|\n",
      "| stddev|      null|\n",
      "|    min|     Guest|\n",
      "|    max|Logged Out|\n",
      "+-------+----------+\n",
      "\n",
      "None\n",
      "+-------+------+---------+--------+------+--------+\n",
      "|summary|gender|firstName|lastName|length|location|\n",
      "+-------+------+---------+--------+------+--------+\n",
      "|  count|     0|        0|       0|     0|       0|\n",
      "|   mean|  null|     null|    null|  null|    null|\n",
      "| stddev|  null|     null|    null|  null|    null|\n",
      "|    min|  null|     null|    null|  null|    null|\n",
      "|    max|  null|     null|    null|  null|    null|\n",
      "+-------+------+---------+--------+------+--------+\n",
      "\n",
      "None\n",
      "+-------+------+-----+------------+------------------+---------+-----------------+\n",
      "|summary|method| page|registration|         sessionId|userAgent|           status|\n",
      "+-------+------+-----+------------+------------------+---------+-----------------+\n",
      "|  count|   336|  336|           0|               336|        0|              336|\n",
      "|   mean|  null| null|        null| 4215.958333333333|     null|          240.125|\n",
      "| stddev|  null| null|        null|2010.0177718206444|     null|51.87840979622517|\n",
      "|    min|   GET|About|        null|               116|     null|              200|\n",
      "|    max|   PUT|Login|        null|              7096|     null|              307|\n",
      "+-------+------+-----+------------+------------------+---------+-----------------+\n",
      "\n",
      "None\n",
      "+-------+--------------------+-----+----+\n",
      "|summary|                  ts|level|song|\n",
      "+-------+--------------------+-----+----+\n",
      "|  count|                 336|  336|   0|\n",
      "|   mean|1.513785530792928...| null|null|\n",
      "| stddev| 3.441242686019977E7| null|null|\n",
      "|    min|       1513721196284| free|null|\n",
      "|    max|       1513846494284| paid|null|\n",
      "+-------+--------------------+-----+----+\n",
      "\n",
      "None\n",
      "+-----+------+----------+-----+\n",
      "| page|method|      auth|count|\n",
      "+-----+------+----------+-----+\n",
      "| Help|   GET|Logged Out|    8|\n",
      "|Login|   PUT|Logged Out|  126|\n",
      "| Home|   GET|Logged Out|  186|\n",
      "| Home|   GET|     Guest|    1|\n",
      "|About|   GET|     Guest|    1|\n",
      "|About|   GET|Logged Out|   14|\n",
      "+-----+------+----------+-----+\n",
      "\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# TODO: use this space to explore the behavior of the user with an empty string\n",
    "empty_users = df.filter(df.userId == \"\")\n",
    "print(empty_users.select(\"artist\").describe().show())\n",
    "print(empty_users.select(\"auth\").describe().show())\n",
    "print(empty_users.select([\"gender\", \"firstName\", \"lastName\", \"length\", \"location\"]).describe().show())\n",
    "print(empty_users.select([\"method\", \"page\", \"registration\", \"sessionId\", \"userAgent\", \"status\"]).describe().show())\n",
    "print(empty_users.select([\"ts\", \"level\", \"song\"]).describe().show())\n",
    "print(empty_users.groupBy([\"page\", \"method\", \"auth\"]).count().show())\n",
    "#Users who are only visiting the About, Home and Login pages are probably unregistered visitors."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 3\n",
    "\n",
    "How many female users do we have in the data set?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "462\n"
     ]
    }
   ],
   "source": [
    "# TODO: write your code to answer question 3\n",
    "print(df.drop_duplicates(subset = [\"userId\"]).where(\"gender = 'F'\").count())\n",
    "# There are 462 female users in total"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 4\n",
    "\n",
    "How many songs were played from the most played artist?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------+-----+\n",
      "|              artist|count|\n",
      "+--------------------+-----+\n",
      "|                null| 1653|\n",
      "|            Coldplay|   83|\n",
      "|       Kings Of Leon|   69|\n",
      "|Florence + The Ma...|   52|\n",
      "|            BjÃÂ¶rk|   46|\n",
      "|       Dwight Yoakam|   45|\n",
      "|       Justin Bieber|   43|\n",
      "|      The Black Keys|   40|\n",
      "|         OneRepublic|   37|\n",
      "|                Muse|   36|\n",
      "|        Jack Johnson|   36|\n",
      "|           Radiohead|   31|\n",
      "|        Taylor Swift|   29|\n",
      "|Barry Tuckwell/Ac...|   28|\n",
      "|          Lily Allen|   28|\n",
      "|               Train|   28|\n",
      "|           Daft Punk|   27|\n",
      "|           Metallica|   27|\n",
      "|          Nickelback|   27|\n",
      "|          Kanye West|   26|\n",
      "+--------------------+-----+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# TODO: write your code to answer question 4\n",
    "df.groupBy(\"artist\").count().orderBy('count', ascending = False).show()\n",
    "# There were 83 songs were played for the most played artist (excluding NULL)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 5 (challenge)\n",
    "\n",
    "How many songs do users listen to on average between visiting our home page? Please round your answer to the closest integer.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|avg(count(period))|\n",
      "+------------------+\n",
      "| 6.898347107438017|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# TODO: write your code to answer question 5\n",
    "function = F.udf(lambda ishome : int(ishome == 'Home'), IntegerType())\n",
    "\n",
    "user_window = Window \\\n",
    "    .partitionBy('userID') \\\n",
    "    .orderBy(F.desc('ts')) \\\n",
    "    .rangeBetween(Window.unboundedPreceding, 0)\n",
    "\n",
    "cusum = df.filter((df.page == 'NextSong') | (df.page == 'Home')) \\\n",
    "    .select('userID', 'page', 'ts') \\\n",
    "    .withColumn('homevisit', function(F.col('page'))) \\\n",
    "    .withColumn('period', F.sum('homevisit').over(user_window))\n",
    "\n",
    "cusum.filter((cusum.page == 'NextSong')) \\\n",
    "    .groupBy('userID', 'period') \\\n",
    "    .agg({'period':'count'}) \\\n",
    "    .agg({'count(period)':'avg'}).show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
